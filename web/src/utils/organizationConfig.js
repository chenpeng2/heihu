import _ from 'lodash';

import { getOrganizationConfig } from 'src/services/organization';
import { orgInfo } from 'src/services/auth/user';
import LocalStorage from 'utils/localStorage';

export const setOrganizationInfoInLocalStorage = async () => {
  const res = await orgInfo();
  const info = _.get(res, 'data.data');

  LocalStorage.set('ORGANIZATION_INFO', info);
};

export const getOrganizationInfoFromLocalStorage = () => {
  return LocalStorage.get('ORGANIZATION_INFO');
};

// Â∞ÜÂ∑•ÂéÇÁöÑÈÖçÁΩÆÂÜôÂÖ•localStorage
export const setOrganizationConfigInLocalStorage = async () => {
  const res = await getOrganizationConfig();
  const config = _.keyBy(res.data.data, e => e.configKey);
  LocalStorage.set('CONFIG', config);
};

export const getOrganizationConfigFromLocalStorage = () => {
  return LocalStorage.get('CONFIG');
};

// Â∑•ÂéÇÈÖçÁΩÆÁöÑkeyÔºåÊ∂àÈô§È≠îÊúØÂ≠óÁ¨¶‰∏≤
export const ORGANIZATION_CONFIG = {
  parallelProcess: 'config_parallel_process',
  taskDispatchType: 'config_task_dispatch_type', // ‰ªªÂä°Ê¥æÂèëÊñπÂºè
  taskOperatorExclusive: 'config_task_operator_exclusive',
  useControl: 'config_use_control',
  useQrcode: 'config_use_qrcode',
  erpSync: 'config_erp_sync',
  maxSubscribeLevel: 'config_max_subscribe_level',
  materialRequestAck: 'config_material_request_ack',
  materialRequestType: 'config_material_request_type',
  weighing: 'config_weighing',
  editProject: 'config_project_edit',
  configDocumentManagement: 'config_document_management',
  SOPConfig: 'config_sop',
  configProduceTaskDeliverable: 'config_produce_task_deliverable',
  configMbomTooling: 'config_mbom_tooling',
  baitingWorkOrder: 'config_plan_work_order_baiting',
  materialCheckDate: 'config_material_check_date',
  transferApplyWithMoveTransaction: 'config_material_request_transcation', // webÂàõÂª∫ËΩ¨ÁßªÁî≥ËØ∑ÊòØÂê¶ÈúÄË¶ÅÂÖ≥ËÅîÁßªÂä®‰∫ãÂä°
  frozenTime: 'config_frozen_time', // ÂêØÁî®ÂÜªÁªìÊó∂Èó¥‰∏∫1Êó∂ÔºåÁâ©ÊñôÂÆö‰πâÂ§ÑÊúâ„ÄåÂÜªÁªìÊó∂Èó¥„ÄçÂ≠óÊÆµÔºåÂ∑•Â∫èÂÆö‰πâ/Â∑•Ëâ∫Ë∑ØÁ∫ø/Áîü‰∫ßBOMÊúâ„Äå‰∫ßÂá∫ÊòØÂê¶ÂÜªÁªì„ÄçÂ≠óÊÆµ
  qcReportRecordCountSettable: 'config_qc_report_record_count_settable', // Ë¥®Ê£ÄÊñπÊ°àÂ§Ñ„ÄåÊä•ÂëäËÆ∞ÂΩïÊï∞Èáè„ÄçÊòØÂê¶ÂèØËÆæÁΩÆ
  configInjectWorkOrder: 'config_plan_work_order_inject_mold', // ÊòØÂê¶ÂêØÁî®Ê≥®Â°ëËÆ°ÂàíÂ∑•Âçï
  injectionMouldingWorkOrder: 'config_plan_work_order_inject_mold', // ÊòØÂê¶ÂêØÁî®Ê≥®Â°ëËÆ°ÂàíÂ∑•Âçï
  qcReportAudit: 'config_qc_report_audit', // Ë¥®Ê£ÄÊä•ÂëäÂÆ°Ê†∏
  repeatQcAudit: 'config_repeat_qc_audit', // Â§çÊ£ÄÂàõÂª∫ÂÆ°Ê†∏
  configQcCheckItemComment: 'config_qc_check_item_remarkable', // ÂΩïÂÖ•Ë¥®Ê£ÄÈ°πÊòØÂê¶Ê∑ªÂä†Â§áÊ≥®
  qcDefectRanked: 'config_qc_defect_ranked', // ÊòØÂê¶ÂºÄÂêØ‰∏çËâØÁ≠âÁ∫ß
  avgControl: 'config_agv_control', // ÈÄâÊã©AGVÊéß‰ª∂,
  planWorkOrderAudit: 'config_plan_work_order_audit', // ÊòØÂê¶ÂºÄÂêØËÆ°ÂàíÂ∑•ÂçïÂÆ°Êâπ
  configScheduleTask: 'config_schedule_task', // ÊéíÁ®ãÊñπÂºè
  BatchRecord: 'config_batch_record', // È°πÁõÆÊòØÂê¶ÂêØÁî®ÊâπËÆ∞ÂΩï
  ProjectBatchRecordAudit: 'config_batch_record_audit', // È°πÁõÆÊòØÂê¶ÂêØÁî®ÊâπËÆ∞ÂΩïÂÆ°Êâπ
  FirstQcTaskControlConfig: 'config_origin_qc_task_control', // È¶ñÊ£ÄÁÆ°ÊéßÁ®ãÂ∫¶
  ProduceTaskDeliverable: 'config_produce_task_deliverable', // Áîü‰∫ß‰ªªÂä°ÂêØÁî®ÂÆ°Êâπ
  ValidityPeriodPrecision: 'config_validity_period_presicion', // ÊúâÊïàÊúüÁ≤æÂ∫¶
  qcItemCodingManually: 'config_qc_check_item_coding_manually', // ÊâãÂ∑•ËæìÂÖ•Ë¥®Ê£ÄÈ°πÁºñÂè∑
  configMaterialTransferDisplayUnit: 'config_material_transfer_display_unit',
  originQcNeedMaterialQr: 'config_origin_qc_need_material_qr', // È¶ñÊ£ÄÈúÄË¶ÅËÆ∞ÂΩïÁâ©Êñô‰∫åÁª¥Á†Å
  configPlanWorkOrderBaiting: 'config_plan_work_order_baiting', // ‰∏ãÊñôÂ∑•Âçï
};

// ‰ªªÂä°Ê¥æÂèëÊñπÂºè
export const TASK_DISPATCH_TYPE = {
  manager: 'manager', // ‰∏ªÁÆ°Ê¥æÂèë = ÁÆ°ÁêÜÂëòÁÆ°Êéß
  worker: 'worker', // Â∑•‰∫∫ÁÆ°Êéß
  workerWeak: 'worker_weak', // Â∑•‰∫∫Âº±ÁÆ°Êéß
};

// ÊòØÂê¶‰ΩøÁî®‰∫åÁª¥Á†Å
export const isOrganizationUseQrCode = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.useQrcode}.configValue`) === 'true';
};

export const configHasSOP = () =>
  _.get(getOrganizationConfigFromLocalStorage(), `${ORGANIZATION_CONFIG.SOPConfig}.configValue`) === 'true';

// Ëé∑ÂèñÊòØÂê¶‰ΩøÁî®Áîü‰∫ß‰ªªÂä°ÂÆ°Êâπ
export const getTaskDeliverableOrganizationConfig = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.configProduceTaskDeliverable}.configValue`) === 'true';
};

// Ëé∑ÂèñÊòØÂê¶‰ΩøÁî®Áîü‰∫ß‰ªªÂä°ÂÆ°Êâπ
export const getToolingOrganizationConfig = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${[ORGANIZATION_CONFIG.configMbomTooling]}.configValue`) === 'true';
};

// Ëé∑ÂèñÊòØÂê¶‰ΩøÁî®‰∏ãÊñôÂ∑•Âçï
export const getBaitingWorkOrderConfig = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.baitingWorkOrder}.configValue`) === 'true';
};

// Ëé∑ÂèñÁâ©ÊñôÂÆ°Ê†∏Êó•ÊúüÁöÑÂ∑•ÂéÇÈÖçÁΩÆ
export const getMaterialCheckDateConfig = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.materialCheckDate}.configValue`) === 'true';
};

// Ëé∑ÂèñÊòØÂê¶‰ΩøÁî®Áß∞ÈáèÊ®°Âùó
export const getWeighingConfig = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.weighing}.configValue`) === 'true';
};

// Ëé∑ÂèñÊòØÂê¶‰ΩøÁî®Ê≥®Â°ëËÆ°ÂàíÂ∑•Âçï
export const getInjectWorkOrderConfig = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.configInjectWorkOrder}.configValue`) === 'true';
};

// Ë¥®Ê£ÄÊñπÊ°àÊä•ÂëäËÆ∞ÂΩïÊï∞ÈáèÊòØÂê¶ÂèØËÆæÁΩÆ
export const isQcReportRecordCountSettable = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.qcReportRecordCountSettable}.configValue`) === 'true';
};

// ÊòØÂê¶ÊâãÂ∑•ËæìÂÖ•Ë¥®Ê£ÄÈ°πÁºñÂè∑
export const isQcItemCodingManually = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.qcItemCodingManually}.configValue`) === 'true';
};

// È¶ñÊ£ÄÈúÄË¶ÅËÆ∞ÂΩïÁâ©Êñô‰∫åÁª¥Á†Å
export const isOriginQcNeedMaterialQr = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.originQcNeedMaterialQr}.configValue`) === 'true';
};

/**
 * @description: webÂàõÂª∫ËΩ¨ÁßªÁî≥ËØ∑ÊòØÂê¶ÈúÄË¶ÅÂÖ≥ËÅîÁßªÂä®‰∫ãÂä°
 * @wiki: http://wiki.blacklake.tech/pages/viewpage.action?pageId=6062807„ÄÇÈÖçÁΩÆ55
 * @date: 2019/5/13 ‰∏ãÂçà4:16
 */
export const isTransferApplyWithMoveTransactionConfig = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.transferApplyWithMoveTransaction}.configValue`) === '2';
};

export const getConfigCapacityConstraint = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.configScheduleTask}.configValue`) === '2';
};

/**
 * @description: ÊòØÂê¶‰ΩøÁî®ÂÜªÁªìÊó∂Èó¥
 *
 * ÂêéÁ´Ø‰ΩøÁî®0Ë°®Á§∫falseÔºå1Ë°®Á§∫true
 *
 * @date: 2019/5/23 ‰∏ãÂçà3:09
 */
export const useFrozenTime = () => {
  const config = getOrganizationConfigFromLocalStorage();

  return _.get(config, `${ORGANIZATION_CONFIG.frozenTime}.configValue`) === 'true';
};

// ÊòØÂê¶ÊúâÊ≠§Â∑•ÂéÇÈÖçÁΩÆ, ‰ª•‰∏äÈÉΩÊòØÂ§çÂà∂Á≤òË¥¥‰ª£Á†Å(üëé)
export const includeOrganizationConfig = config => {
  const organizationConfig = getOrganizationConfigFromLocalStorage();
  return _.get(organizationConfig, `${config}.configValue`) === 'true';
};

// Â∑•ÂéÇÊúâÊïàÊúüÈÖçÁΩÆ
export const VALIDITY_PERIOD_PRECISION = {
  day: { value: '1', format: 'YYYY/MM/DD' },
  hour: { value: '2', format: 'YYYY/MM/DD HH' },
};

// Ëé∑ÂèñÂ∑•ÂéÇÊúâÊïàÊúüÈÖçÁΩÆ
export const getOrganizationValidityPeriodConfig = () => {
  const organizationConfig = getOrganizationConfigFromLocalStorage();
  return _.get(organizationConfig, `${ORGANIZATION_CONFIG.ValidityPeriodPrecision}.configValue`);
};

// Ê†πÊçÆÂ∑•ÂéÇÈÖçÁΩÆËé∑ÂèñÊúâÊïàÊúüÁöÑÁ≤æÂ∫¶Ê†ºÂºè
export const getValidityPeriodPrecision = () => {
  const organizationConfig = getOrganizationConfigFromLocalStorage();
  const configValue = _.get(organizationConfig, `${ORGANIZATION_CONFIG.ValidityPeriodPrecision}.configValue`);
  // momentËÆ§‰∏∫YYYY/MM/DD HH‰∏çÊòØÂêàÊ≥ïÊó∂Èó¥
  if (configValue === '1') return { showFormat: 'YYYY/MM/DD', momentFormat: 'YYYY/MM/DD' };
  if (configValue === '2') return { showFormat: 'YYYY/MM/DD HH:00', momentFormat: 'YYYY/MM/DD HH:mm' };
  return { showFormat: 'YYYY/MM/DD', momentFormat: 'YYYY/MM/DD' };
};

export default 'dummy';
